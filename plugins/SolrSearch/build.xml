<?xml version="1.0" encoding="UTF-8"?>

<!--
    Document   : build.xml
    Created on : January 10, 2011, 12:27 PM
    Author     : Scholars' Lab
    Version    : $Id$
    Description:
        Build environment for SolrSearch Omeka Plugin.
-->

<project name="SolrSearch" default="usage" basedir=".">

  <description>SolrSearch plugin for Omeka Platform</description>


  <!-- properties for the ini file -->
  <property name="project" value="SolrSearch" />
  <property name="version" value="1.0.0" />
  <property name="Author" value="Scholars' Lab" />
  <property name="description" value="Integrate Apache Solr into Omeka for primary searching." />
  <property name="link" value="http://scholarslab.github.com/SolrSearch/" />
  <property name="support" value="https://github.com/scholarslab/SolrSearch/issues" />
  <property name="min_version" value="1.3" />
  <property name="tested_up" value="1.4.1" />
  <property name="target_version" value="1.4.1" />
  <property name="tags" value="solr,search" />
  <property name="licence" value="Apache 2.0" />

  <property name="build" location="build" />
  <property name="dist" location="${build}/dist" />
  <tstamp />
  <property name="now" value="${DSTAMP}-${TSTAMP}" />
  <property name="tar" value="${project}-${now}.tar" />
  <property name="gzip" value="${tar}.gz" />
  <property name="excludes" value="${build}/**,${dist}/**,tests/**,.git/**,.*,.sass-cache/**,_*/**,spec/**,Cakefile,Rakefile,node_modules/**,package.json,Gemfile*,Guardfile,build.xml" />
  <property name="lang.dir" location="languages" />
  <property name="core.pot" location="../../application/languages/Omeka.pot" />


    <target name="setup" description="Create the build directory structure">
        <tstamp />
        <!-- create the build directory structure -->
        <mkdir dir="${build}/api" />
        <mkdir dir="${build}/code-browser" />
        <mkdir dir="${build}/coverage" />
        <mkdir dir="${build}/logs" />
        <mkdir dir="${build}/pdepend" />
        <mkdir dir="${build}/phpmd" />
    </target>

    <target name="clean" description="Clean up">
        <delete dir="${build}" />
        <delete dir="${dist}" />
      </target>

    <target name="writeini" description="Write the INI file for the plugin">
      <replace file="${basedir}/plugin.ini">
        <replacefilter token="%version%" value="${version}" />
      </replace>
    </target>

    <target name="package" depends="clean" description="Create zipped packages for public distribution">
      <mkdir dir="${dist}" />

      <zip destfile="${dist}/${project}-${version}.zip">
        <zipfileset dir="${basedir}" prefix="${project}" 
          excludes="${excludes}" />
      </zip>

    </target>

    <target name="tar" description="Create a zipped package for distribution">

        <mkdir dir="${dist}" />

        <tar destfile="${dist}/${project}-${now}.tar"
          basedir="${basedir}"
          prefix="${project}"
          excludes="${excludes}" />

        <gzip zipfile="${dist}/${gzip}" src="${dist}/${tar}" />
        <delete file="${dist}/${tar}" />
    </target>

    <target name="zip" description="Create a zipped package for distribution">
      <mkdir dir="${dist}" />

      <zip destfile="${dist}/${project}-${now}.zip">
        <zipfileset dir="${basedir}" prefix="${project}" excludes="${excludes}" />
      </zip>
    </target>

    <target name="package-docs" depends="phpdoc" description="Create a zipped package of the documentation">

        <echo message="Compressing documentation" />

        <mkdir dir="${dist}" />

        <property name="docfile" value="${project}-docs-${now}.tar" />
        <property name="zipfile" value="${docfile}.gz" />

        <tar destfile="${dist}/${docfile}"
            basedir="${build}/api" />

        <gzip zipfile="${dist}/${zipfile}" src="${dist}/${docfile}" />
        <delete file="${dist}/${docfile}" />
    </target>

    <target name="parallelTasks" description="Run pdepend, phpmd, phpcpd, phpcs, and phpdoc tasks on parallel threads">
        <parallel>
            <antcall target="pdepend" />
            <antcall target="phpmd" />
            <antcall target="phpcpd"/>
            <antcall target="phpcs"/>
            <antcall target="phpdoc" />
        </parallel>
    </target>

    <target name="phpunit" description="Run unit tests on current plugin">
        <exec executable="phpunit" failonerror="true">
            <arg line="tests/AllTests.php" />
        </exec>
    </target>

    <target name="pdepend" depends="setup" description="Create PHP_Depend Static Code Analysis report">

        <!--
            This task runs PHP_Depend on your library. For more on usage, see the
            PHP_Depend Documentation at http://pdepend.org/documentation/getting-started.html
        -->

        <exec executable="pdepend">
            <arg line="--jdepend-xml=${build}/logs/jdepend.xml
                       --jdepend-chart=${build}/pdepend/dependencies.svg
                       --overview-pyramid=${build}/pdepend/overview-pyramid.svg
                       ." />
        </exec>
    </target>

    <target name="phpmd" depends="setup" description="Generate PHP Mess Detector report">

        <!--
            This task creates a report by running the PHP Mess Detector package
            on the source. For more information on the configuration options
            see http://phpmd.org/documentation/index.html
        -->

        <exec executable="phpmd">
            <arg line="${basedir} html codesize,design,naming,unusedcode --reportfile ${build}/phpmd/index.html" />
        </exec>
    </target>

     <target name="phpcpd" depends="setup" description="Generate a PHP Copy/Paste Detection report">

         <!--
            phpcpd is a light-weight detector of duplicate code. For more information
            see the documentation at http://github.com/sebastianbergmann/phpcpd
         -->

        <exec executable="phpcpd">
            <arg line="--log-pmd ${build}/logs/pmd-cpd.xml ${basedir}" />
        </exec>
    </target>

    <target name="phpcs" depends="setup" description="Generate a PHP_CodeSniffer report for coding standards">
        <!--
            PHP_CodeSniffer detects violations of coding standards. See 
            http://pear.php.net/package/PHP_CodeSniffer/docs for usage.
        -->

        <exec executable="phpcs" output="/dev/null">
             <arg line="--report=checkstyle
                        --extensions=php
                        --ignore=*/tests/*
                        --report-file=${build}/logs/checkstyle.xml
                        --standard=Zend
                        ${basedir}" />
        </exec>
    </target>

    <target name="phpdoc" depends="setup" description="Generate programming documentation with PHPDoc">
        <!--
            PHPDoc generates documentation for your project. See http://www.phpdoc.org for
            configuration/usage examples.

            To generate different outputs, try any (or all) of the following

            -o HTML:frames:earthli,HTML:Smarty:PHP,HTML:frames:phphtmllib,HTML:frames:phpedit,PDF:default:default
        -->
        <exec executable="phpdoc">
            <arg line="-o HTML:frames:earthli -d ${basedir} -t ${build}/api -i tests/,dist/,build/" />
        </exec>
    </target>

    <target name="phpcb" depends="setup, phpcs" description="Generate the PHPCodeBrowser report">
        <!--
            Visualize errors in your code from CodeSniffer and PhpUnit

            see http://github.com/mayflowergmbh/PHP_CodeBrowser
        -->
        <exec executable="phpcb">
            <arg line="--log   ${build}/logs
                      --source ${basedir}
                      --output ${build}/code-browser" />
        </exec>


    </target>

    <target name="build" depends="clean, setup, parallelTasks, phpunit, phpcb"
        description="Builds the PHP reports" />

    <target name="usage">
        <echo message="Type ant -p to list all the targets available in this build script." />
    </target>

    <target name="update-pot" description="Update the translation template.">
      <property name="pot.file" location="${lang.dir}/template.pot"/>
      <property name="pot.base" location="${lang.dir}/template.base.pot"/>
      <tempfile property="pot.temp" suffix=".pot"/>
      <tempfile property="pot.duplicates" suffix="-duplicates.pot" />
      <apply executable="xgettext" relative="true" parallel="true" verbose="true">
        <arg value="-L"/>
        <arg value="php"/>
        <arg value="--from-code=utf-8"/>
        <arg value="-k__"/>
        <arg value="--flag=__:1:pass-php-format"/>
        <arg value="--omit-header"/>
        <arg value="-F"/>
        <arg value="-o"/>
        <arg file="${pot.temp}"/>
        <fileset dir="." includes="**/*.php **/*.phtml" excludes="tests/"/>
      </apply>
      <exec executable="msgcomm">
        <arg value="--omit-header" />
        <arg value="-o" />
        <arg file="${pot.duplicates}" />
        <arg file="${pot.temp}" />
        <arg file="${core.pot}" />
      </exec>
      <exec executable="msgcomm">
        <arg value="-u" />
        <arg value="-o" />
        <arg file="${pot.temp}" />
        <arg file="${pot.temp}" />
        <arg file="${pot.duplicates}" />
      </exec>
      <exec executable="msgcat">
        <arg value="-o"/>
        <arg file="${pot.file}"/>
        <arg file="${pot.base}"/>
        <arg file="${pot.temp}"/>
      </exec>
      <delete file="${pot.temp}" quiet="true" />
      <delete file="${pot.duplicates}" quiet="true" />
    </target>

    <target name="build-mo" description="Build the MO translation files.">
      <apply executable="msgfmt" dest="${lang.dir}" verbose="true">
        <arg value="-o"/>
        <targetfile />
        <srcfile />
        <fileset dir="${lang.dir}" includes="*.po"/>
        <mapper type="glob" from="*.po" to="*.mo"/>
      </apply>
    </target>
</project>
